generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  name      String
  username  String @unique
  email     String @unique
  password  String
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions  Session[]
  favorites Favorite[]
  recipes   Recipe[]
}

enum Role {
  USER
  ADMIN
}

model Session {
  id        String @id @default(uuid())
  createdAt DateTime @default(now())

  userId    String
  user User @relation(fields: [userId], references: [id])
}

model Recipe {
  id          String @id @default(uuid())
  title       String
  description String?
  cookingTime Int 
  servings    Int
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user User @relation(fields: [userId], references: [id])

  instructions  Instruction[]
  ingredients   RecipeIngredient[]
  categories    RecipeCategory[]
  favorites     Favorite[]
}

model Ingredient {
  id         String   @id @default(uuid())
  name       String   @unique
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  recipes RecipeIngredient[]
}

model RecipeIngredient {
  id            String   @id @default(uuid())
  quantity      Float
  unit          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  recipeId      String
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  ingredientId  String
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])

  @@index([recipeId, ingredientId])
}

model Instruction {
  id         String   @id @default(uuid())
  stepNumber Int
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  recipeId   String
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  recipes RecipeCategory[]
}

model RecipeCategory {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  recipeId   String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@index([recipeId, categoryId])
}

model Favorite {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  
  recipeId   String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}